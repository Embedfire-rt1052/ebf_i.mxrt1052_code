setup()
{
__var tmp;

  /*Enable PLL3 (USBPLL1)*/
  __writeMemory32(0x00003000,0x400D8010,"Memory");  
	
  /** Set PLL3 PDF0 to ~262MHz **/
  tmp = __readMemory32(0x400D80F0,"Memory") & ~(0xFF<<0);
  __writeMemory32(tmp | (1<<7),0x400D80F0,"Memory");
  __writeMemory32(tmp | (0x21<<0),0x400D80F0,"Memory");
  
  /** Select FlexSPI Clock from PLL3 PFD0 (262MHz)
      with divider set to 2. SCLK to FlexSPI will be 131MHz **/
  tmp = __readMemory32(0x400FC01C,"Memory");  //read CCM_CSCMR1
  tmp &= ~((0x3<<29) | (0x7<<23)); //
  tmp |= ((0x3<<29) | (0x1<<23));  //FlexSPI_clk_podf = 1(divide by 2); FlexSPI_clk_sel = 3;
  __writeMemory32(tmp,0x400FC01C,"Memory");     //write back CCM_CSCMR1
  
  /** Enable FlexSPI Clock in CCM **/
  tmp = __readMemory32(0x400FC080,"Memory");  //read CCM_CCGR6
  tmp |= (3<<10);                             //Set CG5 bits
  __writeMemory32(tmp,0x400FC080,"Memory");   //write back CCM_CCGR6
  
  /** Set these bits for chip revision A1.
	  The bits are reserved in A0 but are set by default.
	  So this should not change anything for A0 **/
  tmp = __readMemory32(0x400FC068,"Memory");  //read CCM_CCGR0
  tmp |= (3<<6);                              //Set CG3 bits
  __writeMemory32(tmp,0x400FC068,"Memory");   //write back CCM_CCGR0
  
  /** IOMUX config **/
  /* Pin Mux */
  __writeMemory32(0x1,0x401F81D4,"Memory");  //IOMUXC_GPIO_SD_B1_00 FLEXSPIB_DATA03
  __writeMemory32(0x1,0x401F81D8,"Memory");  //IOMUXC_GPIO_SD_B1_01 FLEXSPIB_DATA02
  __writeMemory32(0x1,0x401F81DC,"Memory");  //IOMUXC_GPIO_SD_B1_02 FLEXSPIB_DATA01
  __writeMemory32(0x1,0x401F81E0,"Memory");  //IOMUXC_GPIO_SD_B1_03 FLEXSPIB_DATA00
  __writeMemory32(0x1,0x401F81E4,"Memory");  //IOMUXC_GPIO_SD_B1_04 FLEXSPIB_SCLK 
  __writeMemory32(0x1,0x401F81E8,"Memory");  //IOMUXC_GPIO_SD_B1_05 FLEXSPIA_DQS
  __writeMemory32(0x1,0x401F81EC,"Memory");  //IOMUXC_GPIO_SD_B1_06 FLEXSPIA_SS0_B
  __writeMemory32(0x1,0x401F81F0,"Memory");  //IOMUXC_GPIO_SD_B1_07 FLEXSPIA_SCLK 
  __writeMemory32(0x1,0x401F81F4,"Memory");  //IOMUXC_GPIO_SD_B1_08 FLEXSPIA_DATA00
  __writeMemory32(0x1,0x401F81F8,"Memory");  //IOMUXC_GPIO_SD_B1_09 FLEXSPIA_DATA01
  __writeMemory32(0x1,0x401F81FC,"Memory");  //IOMUXC_GPIO_SD_B1_10 FLEXSPIA_DATA02
  __writeMemory32(0x1,0x401F8200,"Memory");  //IOMUXC_GPIO_SD_B1_11 FLEXSPIA_DATA03
  /* Pin Config */
  __writeMemory32(0x10F1,0x401F83C4,"Memory");  //IOMUXC_GPIO_SD_B1_00 FLEXSPIB_DATA03
  __writeMemory32(0x10F1,0x401F83C8,"Memory");  //IOMUXC_GPIO_SD_B1_01 FLEXSPIB_DATA02
  __writeMemory32(0x10F1,0x401F83CC,"Memory");  //IOMUXC_GPIO_SD_B1_02 FLEXSPIB_DATA01
  __writeMemory32(0x10F1,0x401F83D0,"Memory");  //IOMUXC_GPIO_SD_B1_03 FLEXSPIB_DATA00
  __writeMemory32(0x10F1,0x401F83D4,"Memory");  //IOMUXC_GPIO_SD_B1_04 FLEXSPIB_SCLK
  __writeMemory32(0x130F1,0x401F83D8,"Memory");  //IOMUXC_GPIO_SD_B1_05 FLEXSPIA_DQS
  __writeMemory32(0x10F1,0x401F83DC,"Memory");  //IOMUXC_GPIO_SD_B1_06 FLEXSPIA_SS0_B
  __writeMemory32(0x10F1,0x401F83E0,"Memory");  //IOMUXC_GPIO_SD_B1_07 FLEXSPIA_SCLK
  __writeMemory32(0x10F1,0x401F83E4,"Memory");  //IOMUXC_GPIO_SD_B1_08 FLEXSPIA_DATA00
  __writeMemory32(0x10F1,0x401F83E8,"Memory");  //IOMUXC_GPIO_SD_B1_09 FLEXSPIA_DATA01
  __writeMemory32(0x10F1,0x401F83EC,"Memory");  //IOMUXC_GPIO_SD_B1_10 FLEXSPIA_DATA02
  __writeMemory32(0x10F1,0x401F83F0,"Memory");  //IOMUXC_GPIO_SD_B1_11 FLEXSPIA_DATA03
  
  //if( 2 > ((SRC_SBMR1>>8) & 0x7))
  if( 2 > ((__readMemory32(0x400F8004,"Memory")>>8) & 0x7))
  {/*BOOT is from QSPI memory*/
	__writeMemory32(0x4,0x401F81E8,"Memory");  //IOMUXC_GPIO_SD_B1_05 FLEXSPIB_SS0_B
	__writeMemory32(0x10F1,0x401F83D8,"Memory");  //IOMUXC_GPIO_SD_B1_05 FLEXSPIB_SS0_B
  }


//  __writeMemory32(0x60000010,0xE000ED9C,"Memory");	//
//  __writeMemory32(0x03010035,0xE000EDA0,"Memory");	//
//  __writeMemory32(0x00000005,0xE000ED94,"Memory");	//
  
}
  
execUserReset()
{
  __message "----- Prepare hardware for Flashloader -----\n";
  setup();
}

execUserFlashReset()  // Called by debugger before loading flash loader in RAM.
{
  __message "----- Prepare hardware for Flashloader -----\n";
  setup();
}

